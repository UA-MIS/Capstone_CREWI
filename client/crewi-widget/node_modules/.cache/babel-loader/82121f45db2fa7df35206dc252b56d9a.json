{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sward22\\\\Desktop\\\\Capstone_CREWI\\\\client\\\\crewi-widget\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Render each post\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction renderPost(post) {\n  const {\n    data: {\n      title,\n      url,\n      author,\n      id\n    }\n  } = post;\n  const authorUrl = `https://www.reddit.com/u/${author}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reddit_widget__post\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reddit_widget__posted_by\",\n      children: [\"posted by \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: authorUrl,\n        className: \"reddit_widget__posted_by\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: [\"u/\", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: url,\n      className: \"reddit_widget__title\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n} // Filter, since reddit always returns stickied posts up top\n\n\nfunction nonStickiedOnly(post) {\n  return !post.data.stickied;\n}\n\nfunction App(_ref) {\n  _s();\n\n  let {\n    domElement\n  } = _ref;\n  const subreddit = domElement.getAttribute(\"data-subreddit\");\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Fetch data from reddit\n    setLoading(true);\n    fetch(`https://www.reddit.com/r/${subreddit}.json`).then(response => response.json()).then(data => {\n      setLoading(false);\n      setData(data.data.children.slice(0, 10));\n    }).catch(e => {\n      console.log(e);\n      setLoading(false);\n      setError('error fetching from reddit');\n    });\n  }, [subreddit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reddit_widget__app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"reddit_widget__header\",\n      children: [\"Latest posts in \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://reddit.com/r/${subreddit}`,\n        rel: \"noopener noreferrer\",\n        children: [\"/r/\", subreddit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reddit_widget__inner\",\n      children: [loading && \"Loading...\", error && error, !!data.length && data.filter(nonStickiedOnly).map(renderPost)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"reddit_widget__powered_by\",\n      children: [\"This widget is powered by\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://javascriptpros.com\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        children: \"JavaScriptPros.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"IdmSfJLKNuH28Ok5K+UkwHmlvfw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/sward22/Desktop/Capstone_CREWI/client/crewi-widget/src/App.js"],"names":["React","useEffect","useState","renderPost","post","data","title","url","author","id","authorUrl","nonStickiedOnly","stickied","App","domElement","subreddit","getAttribute","loading","setLoading","error","setError","setData","fetch","then","response","json","children","slice","catch","e","console","log","length","filter","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n// Render each post\nfunction renderPost(post){\n  const { data: { title, url, author, id } } = post\n  const authorUrl = `https://www.reddit.com/u/${author}`\n\n  return (\n    <div className=\"reddit_widget__post\" key={id}>\n      <div className=\"reddit_widget__posted_by\">\n        posted by <a href={authorUrl} className=\"reddit_widget__posted_by\" target=\"_blank\" rel=\"noopener noreferrer\">u/{author}</a>\n      </div>\n      <a href={url} className=\"reddit_widget__title\" target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n    </div>\n  )\n}\n\n// Filter, since reddit always returns stickied posts up top\nfunction nonStickiedOnly(post){\n  return !post.data.stickied\n}\n\nfunction App({ domElement }) {\n  const subreddit = domElement.getAttribute(\"data-subreddit\")\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Fetch data from reddit\n    setLoading(true)\n    fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setLoading(false);\n        setData(data.data.children.slice(0, 10));\n      })\n      .catch((e) => {\n        console.log(e)\n        setLoading(false);\n        setError('error fetching from reddit');\n      });\n  }, [ subreddit ])\n\n  return (\n    <div className=\"reddit_widget__app\">\n      <h1 className=\"reddit_widget__header\">\n        Latest posts in <a href={`https://reddit.com/r/${subreddit}`} rel=\"noopener noreferrer\">/r/{subreddit}</a>\n      </h1>\n      <div className=\"reddit_widget__inner\">\n        {loading && \"Loading...\"}\n        {error && error}\n        {!!data.length && data.filter(nonStickiedOnly).map(renderPost)}\n      </div>\n      <p className=\"reddit_widget__powered_by\">\n        This widget is powered by{\" \"}\n        <a\n          href=\"https://javascriptpros.com\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          JavaScriptPros.com\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}