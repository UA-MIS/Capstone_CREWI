{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sward22\\\\Desktop\\\\Capstone_CREWI\\\\client\\\\crewi-widget\\\\src\\\\App.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css'; // Render each post\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction renderPost(post) {\n  const {\n    data: {\n      title,\n      url,\n      author,\n      id\n    }\n  } = post;\n  const authorUrl = `https://www.reddit.com/u/${author}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reddit_widget__post\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reddit_widget__posted_by\",\n      children: [\"posted by \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: authorUrl,\n        className: \"reddit_widget__posted_by\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: [\"u/\", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 19\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: url,\n      className: \"reddit_widget__title\",\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n} // Filter, since reddit always returns stickied posts up top\n\n\nfunction nonStickiedOnly(post) {\n  return !post.data.stickied;\n}\n\nfunction App(_ref) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let {\n    domElement\n  } = _ref;\n\n  const Widget = props => {\n    _s();\n\n    //these happen once no matter what; they will not run again\n    const [username, setUsername] = useState(\"\");\n    const [orderLink, setOrderLink] = useState(\"\");\n    const [status, setStatus] = useState(\"loading\");\n    const [timeSlot, setTimeSlot] = useState(\"\");\n    const [imgUrl, setImgUrl] = useState(\"\");\n    const [itemName, setItemName] = useState(\"\");\n    const [closestLocation, setClosestLocation] = useState(\"\");\n    const [recentLocation, setRecentLocation] = useState(\"\");\n    const [bestLocation, setBestLocation] = useState(\"\");\n    const [statusMessage, setStatusMessage] = useState(\"\");\n    let time = \"\";\n    let timeStatus = \"\"; //this runs the first time, and then again whenever username is changed \n\n    useEffect(() => {\n      timeStatus = \"\";\n      requestRecommendation();\n    }, [username]); // fetches the recommendation, might need to be async? doesn't look like it does at the moment\n\n    const fetchRecommendation = function (username, time, timeSlot, latitude, longitude) {\n      // for local testing use this:\n      // fetch(`http://localhost:8000/recommendation/`, {\n      // for testing the deployed hosting\n      fetch(`https://crewi-engine.herokuapp.com/recommendation/`, {\n        // GET can't take a request body, apparently\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // request parameters for getting a recommendation\n        body: JSON.stringify({\n          username: username,\n          time: time,\n          timeSlot: timeSlot,\n          latitude: latitude,\n          longitude: longitude\n        })\n      }).then(response => response.json()).then(result => {\n        // logs the result, updates the state (which will update the DOM)\n        console.log(result); // updating item info\n\n        setImgUrl(result.items[0].imgUrl);\n        setItemName(result.items[0].name); // updating location info\n\n        setClosestLocation(result.locations.closestLocation);\n        setRecentLocation(result.locations.recentLocation);\n        setBestLocation(result.locations.bestLocation); // determining the status message\n\n        determineStatus(result.statuses); // going to the success screen\n\n        setStatus(\"success\");\n      }).catch(error => {\n        // logs the error, updates state to fail; this is the full engine failure, so there won't be a status array\n        console.log(error);\n        setStatus(\"fail\");\n      });\n    }; //our first attempt at loading in time; it works, but we should probably reformat the time a little\n    //if this fails, the exception will be caught in requestRec\n\n\n    const loadCurrentTime = function () {\n      // throw 'exception'\n      // I'd like to walk through this at some point to make sure edge cases are covered\n      // return date + \" \" + localTime;\n      Number.prototype.padLeft = function (base, chr) {\n        var len = String(base || 10).length - String(this).length + 1;\n        return len > 0 ? new Array(len).join(chr || '0') + this : this;\n      }; //returns the date in YYYY-MM-DD HH:MM:SS format\n\n\n      var d = new Date(),\n          dformat = [d.getFullYear(), (d.getMonth() + 1).padLeft(), d.getDate().padLeft()].join('-') + ' ' + [d.getHours().padLeft(), d.getMinutes().padLeft(), d.getSeconds().padLeft()].join(':');\n      return dformat;\n    }; // gets coordinates then finds the address from there; \"location\" is the address we need for the request\n\n\n    const loadCurrentLocation = async function () {\n      try {\n        // result will be a Geolocation object; await means execution will pause here until finished\n        let result = await getCoordinates(); // returns the coordinates to requestRecommendation, takes in coordinates and options\n\n        return [result.coords.latitude, result.coords.longitude];\n      } catch {\n        setStatus(\"no-location loading\");\n        return [\"BLOCKED\", \"BLOCKED\"];\n      }\n    }; // returns current latitude and longitude\n\n\n    const getCoordinates = async function () {\n      // gets the current coordinates using geolocator\n      const coordinatePromise = new Promise((resolve, reject) => {\n        navigator.geolocation.getCurrentPosition(resolve, reject);\n      }); // returns coords once the promise is resolved/rejected, which happens when geolocating is complete\n\n      return await coordinatePromise;\n    }; //this runs whenever state or props are updated; it updates token so that the useEffect above will run\n    //props are updated when the button is clicked bc it will update the main state, etc.\n\n\n    useEffect(() => {\n      domElement.getAttribute(\"data-subreddit\");\n      setUsername(domElement.getAttribute(\"username\"));\n      setOrderLink(props.orderLink);\n    }); // runs whenever radio buttons are clicked\n\n    const onValueChange = event => {\n      // updates time slot, re-renders so the buttons will actually be checked\n      setTimeSlot(event.target.value);\n    }; // runs when submitting time slot\n\n\n    const formSubmit = event => {\n      // prevents redirect on form submit\n      event.preventDefault(); // only proceed if the user actually picks a time slot; otherwise, just ignore the submit until they do\n\n      if (timeSlot != \"\") {\n        timeStatus = \"time slot selected\"; // because the requesting useEffect only runs on username change, request has to be called again\n\n        requestRecommendation();\n      }\n    }; // contains overarching logic for loading data, requesting recommendation, and updating status accordingly\n\n\n    const requestRecommendation = async function () {\n      // requesting is when the widget is \"loading\"\n      setStatus(\"loading\"); // reset statuses whenever reloading widget; these should be overwritten anyway\n\n      setStatusMessage(\"\"); // if time slot is blank, try to request with time loading\n\n      if (timeStatus == \"\") {\n        try {\n          // if this fails, no time is invoked\n          time = loadCurrentTime();\n\n          try {\n            // grabs location (meaning street address) and waits here so that fetchRec won't get called until this done\n            // loadCurrentLocation needs to return a blank or sentinel value into location if something fails\n            let coordinates = await loadCurrentLocation();\n            const latitude = coordinates[0];\n            const longitude = coordinates[1]; // this will actually grab the rec and update the status for the DOM\n\n            fetchRecommendation(username, time, timeSlot, latitude, longitude);\n          } catch (error) {\n            console.log(error); // if something goes wrong, go into no-time mode (again, restructure this later)\n\n            setStatus(\"fail\");\n          }\n        } catch (error) {\n          // if time loading failed, update status and don't continue the request\n          console.error(error);\n          setTimeSlot(\"\");\n          setStatus(\"no-time\");\n        }\n      } else {\n        // this will run if time failed and the user picked a time slot\n        try {\n          // grabs location (meaning street address) and waits here so that fetchRec won't get called until this done\n          // loadCurrentLocation needs to return a blank or sentinel value into location if something fails\n          let coordinates = await loadCurrentLocation();\n          const latitude = coordinates[0];\n          const longitude = coordinates[1]; // this will actually grab the rec and update the status for the DOM\n\n          fetchRecommendation(username, time, timeSlot, latitude, longitude);\n        } catch (error) {\n          console.log(error); // if something goes wrong, display fail\n\n          setStatus(\"fail\");\n        }\n      } // time slot needs to be reset after each request so that loading time will be re-attempted\n\n    };\n\n    const clickOrder = () => {\n      window.location.href = orderLink;\n    };\n\n    const copyLocation = location => {\n      navigator.clipboard.writeText(location);\n    };\n\n    const showBest = () => {\n      // Get the snackbar DIV\n      var x = document.getElementById(\"bestSnackbar\");\n      document.getElementById(\"bestButton\").disabled = true; // Add the \"show\" class to DIV\n\n      x.className += \"show\"; // After 3 seconds, remove the show class from DIV\n\n      setTimeout(function () {\n        x.className = x.className.replace(\"show\", \"\");\n        document.getElementById(\"bestButton\").disabled = false;\n      }, 3000);\n    };\n\n    const showClosest = () => {\n      // Get the snackbar DIV\n      var x = document.getElementById(\"closestSnackbar\");\n      document.getElementById(\"closestButton\").disabled = true; // Add the \"show\" class to DIV\n\n      x.className += \"show\"; // After 3 seconds, remove the show class from DIV\n\n      setTimeout(function () {\n        x.className = x.className.replace(\"show\", \"\");\n        document.getElementById(\"closestButton\").disabled = false;\n      }, 3000);\n    };\n\n    const showRecent = () => {\n      // Get the snackbar DIV\n      var x = document.getElementById(\"recentSnackbar\");\n      document.getElementById(\"recentButton\").disabled = true; // Add the \"show\" class to DIV\n\n      x.className += \"show\"; // After 3 seconds, remove the show class from DIV\n\n      setTimeout(function () {\n        x.className = x.className.replace(\"show\", \"\");\n        document.getElementById(\"recentButton\").disabled = false;\n      }, 3000);\n    };\n\n    const showStatus = () => {\n      // Get the snackbar DIV\n      var x = document.getElementById(\"statusSnackbar\");\n      document.getElementById(\"statusBtn\").disabled = true; // Add the \"show\" class to DIV\n\n      x.className += \"show\"; // After 3 seconds, remove the show class from DIV\n\n      setTimeout(function () {\n        x.className = x.className.replace(\"show\", \"\");\n        document.getElementById(\"statusBtn\").disabled = false;\n      }, 3000);\n    }; // this method determines what message to display to the end user based on the engine's issues and fails\n    // lots of room for adjustment here, refer to documentation\n\n\n    const determineStatus = statusArray => {\n      // msg is defaulted to blank, if there isn't a global fail, bad username, or location fail, it'll stay blank\n      // the other fails/issues aren't of top priority, so this keeps the user messages limited\n      // the response can still be logged to see all statuses if needed for debugging\n      let msg = \"\"; // global fail takes priority, it means everything failed and the default is being used\n      // then bad username (if one was given), then location services being blocked\n      // could easily add a scenario for bad username and bad location, but that's probably less useful\n      // in theory if both are broken the user will just fix them one at a time\n      // plenty of adjustments could be made, can document and revise as needed\n\n      if (statusArray.includes(\"GLOBAL_FAIL\")) {\n        msg = \"Unable to make a customized recommendation at this time...\";\n      } else if (statusArray.includes(\"BAD_USERNAME_ISSUE\") && username) {\n        msg = \"No user found with that username, try signing in again\";\n      } else if (statusArray.includes(\"RECOMMEND_CLOSEST_ISSUE\")) {\n        msg = \"We couldn't find you, double check location permissions\";\n      }\n\n      setStatusMessage(msg);\n    }; // DISPLAY SECTION\n    // loading display\n\n\n    if (status == \"loading\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widgetLoading widgetBox boxShadowImitation\",\n        style: {\n          backgroundImage: `url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this);\n    } else if (status == \"no-location loading\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widgetLoading widgetBox boxShadowImitation\",\n        style: {\n          backgroundImage: `url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)`\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"widgetText\",\n          children: \"Location unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 13\n      }, this);\n    } // no-time display\n    else if (status == \"no-time\") {\n      //I think here we would want to display username if the end user has enetered it\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widgetBox boxShadowImitation\",\n        style: {\n          backgroundImage: `none`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Unable to load time, please select an option below:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: formSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              paddingLeft: '38%',\n              textAlign: \"left\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  value: \"Morning\",\n                  name: \"dayPart\",\n                  checked: timeSlot == \"Morning\",\n                  onChange: onValueChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 37\n                }, this), \"\\xA0 Morning\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  value: \"Afternoon\",\n                  name: \"dayPart\",\n                  checked: timeSlot == \"Afternoon\",\n                  onChange: onValueChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 372,\n                  columnNumber: 37\n                }, this), \"\\xA0 Afternoon\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"radio\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  value: \"Night\",\n                  name: \"dayPart\",\n                  checked: timeSlot == \"Night\",\n                  onChange: onValueChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 384,\n                  columnNumber: 37\n                }, this), \"\\xA0 Night\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"widgetButton\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }, this);\n    } // success display (if rec is loaded successfully)\n    else if (status == \"success\") {\n      // location for showing status\n      let statusHtml;\n\n      if (statusMessage) {\n        statusHtml = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"widgetButton statusButton\",\n            id: \"statusBtn\",\n            onClick: showStatus,\n            children: \"\\xA0!\\xA0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"snackbar \",\n            id: \"statusSnackbar\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 27\n        }, this);\n      } // logic for handling the location display; swap out the specific HTML as needed\n      // also there's gotta be a better way to do this logic\n\n\n      let locationHtml;\n\n      if (bestLocation) {\n        // if there's a best location, show it (means closest and most recent were the same and not blank)\n        locationHtml = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"widgetButton\",\n            id: \"bestButton\",\n            onClick: showBest,\n            children: \"Best Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => copyLocation(bestLocation),\n            className: \"snackbar \",\n            id: \"bestSnackbar\",\n            children: bestLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 29\n        }, this);\n      } else if (closestLocation && recentLocation) {\n        // if there isn't a best location (b/c of the 'else') but closest and recent are truthy, they must be different (show both)\n        locationHtml = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"widgetButton\",\n            id: \"closestButton\",\n            onClick: showClosest,\n            children: \"Closest Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => copyLocation(closestLocation),\n            className: \"snackbar \",\n            id: \"closestSnackbar\",\n            children: closestLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 17\n          }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"widgetButton\",\n            id: \"recentButton\",\n            onClick: showRecent,\n            children: \"Previous Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => copyLocation(recentLocation),\n            className: \"snackbar \",\n            id: \"recentSnackbar\",\n            children: recentLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 29\n        }, this);\n      } else if (closestLocation) {\n        // this happens if closest and recent were different, but recent was falsy, meaning it was blank (show closest only)\n        locationHtml = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"widgetButton\",\n            id: \"closestButton\",\n            onClick: showClosest,\n            children: \"Closest Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => copyLocation(closestLocation),\n            className: \"snackbar \",\n            id: \"closestSnackbar\",\n            children: closestLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 440,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 29\n        }, this);\n      } else if (recentLocation) {\n        // this happens if closest and recent were different, but closest was falsy, meaning it was blank (show recent only)\n        locationHtml = /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"widgetButton\",\n            id: \"recentButton\",\n            onClick: showRecent,\n            children: \"Previous Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: () => copyLocation(recentLocation),\n            className: \"snackbar \",\n            id: \"recentSnackbar\",\n            children: recentLocation\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 29\n        }, this);\n      } else {// this means best, recent, and closest locations were all falsy (very likely blank); show an error or something, probably a reset button too\n        // may want to change this later, but the most elegant solution might just be to show nothing\n        // locationHtml = (<div>\n        //     {/* <span className='widgetText'>\n        //         LOCATION SERVICES FAILED\n        //     </span> */}\n        // </div>)\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"widget\",\n        className: \"widgetBox boxShadowImitation\",\n        style: {\n          backgroundImage: `url(${imgUrl})`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"widgetButton resetButton\",\n          onClick: requestRecommendation,\n          children: \"\\u21BB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"widgetText\",\n          children: itemName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 17\n        }, this), statusHtml, locationHtml, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clickOrder,\n          className: \"widgetButton\",\n          id: \"orderSpan\",\n          children: \"Order Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 13\n      }, this);\n    } // fail display (if rec fails completely)\n    else if (status == \"fail\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"widgetBox boxShadowImitation\",\n        style: {\n          backgroundImage: `none`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"widgetText\",\n          children: \"Recommendation failed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"widgetButton\",\n          style: {//   background: '#a83232'\n          },\n          onClick: requestRecommendation,\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 13\n      }, this);\n    } // may want to add more nuances, like having messages for showing location/time failure on the success display or something\n\n  };\n\n  _s(Widget, \"V9Zo3OsjeAVXwcVrNTQpvLN10P8=\");\n\n  const subreddit = domElement.getAttribute(\"data-subreddit\");\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // Fetch data from reddit\n    setLoading(true);\n    fetch(`https://www.reddit.com/r/${subreddit}.json`).then(response => response.json()).then(data => {\n      setLoading(false);\n      setData(data.data.children.slice(0, 10));\n    }).catch(e => {\n      console.log(e);\n      setLoading(false);\n      setError('error fetching from reddit');\n    });\n  }, [subreddit]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reddit_widget__app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"reddit_widget__header\",\n      children: [\"Latest posts in \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://reddit.com/r/${subreddit}`,\n        rel: \"noopener noreferrer\",\n        children: [\"/r/\", subreddit]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reddit_widget__inner\",\n      children: [loading && \"Loading...\", error && error, !!data.length && data.filter(nonStickiedOnly).map(renderPost)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"reddit_widget__powered_by\",\n      children: [\"This widget is powered by\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://javascriptpros.com\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        children: \"JavaScriptPros.com\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 523,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"IdmSfJLKNuH28Ok5K+UkwHmlvfw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/sward22/Desktop/Capstone_CREWI/client/crewi-widget/src/App.js"],"names":["React","useEffect","useState","renderPost","post","data","title","url","author","id","authorUrl","nonStickiedOnly","stickied","App","domElement","Widget","props","username","setUsername","orderLink","setOrderLink","status","setStatus","timeSlot","setTimeSlot","imgUrl","setImgUrl","itemName","setItemName","closestLocation","setClosestLocation","recentLocation","setRecentLocation","bestLocation","setBestLocation","statusMessage","setStatusMessage","time","timeStatus","requestRecommendation","fetchRecommendation","latitude","longitude","fetch","method","headers","body","JSON","stringify","then","response","json","result","console","log","items","name","locations","determineStatus","statuses","catch","error","loadCurrentTime","Number","prototype","padLeft","base","chr","len","String","length","Array","join","d","Date","dformat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","loadCurrentLocation","getCoordinates","coords","coordinatePromise","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getAttribute","onValueChange","event","target","value","formSubmit","preventDefault","coordinates","clickOrder","window","location","href","copyLocation","clipboard","writeText","showBest","x","document","getElementById","disabled","className","setTimeout","replace","showClosest","showRecent","showStatus","statusArray","msg","includes","backgroundImage","paddingLeft","textAlign","statusHtml","locationHtml","subreddit","loading","setLoading","setError","setData","children","slice","e","filter","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n// Render each post\nfunction renderPost(post){\n  const { data: { title, url, author, id } } = post\n  const authorUrl = `https://www.reddit.com/u/${author}`\n\n  return (\n    <div className=\"reddit_widget__post\" key={id}>\n      <div className=\"reddit_widget__posted_by\">\n        posted by <a href={authorUrl} className=\"reddit_widget__posted_by\" target=\"_blank\" rel=\"noopener noreferrer\">u/{author}</a>\n      </div>\n      <a href={url} className=\"reddit_widget__title\" target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n    </div>\n  )\n}\n\n// Filter, since reddit always returns stickied posts up top\nfunction nonStickiedOnly(post){\n  return !post.data.stickied\n}\n\nfunction App({ domElement }) {\n  const Widget = (props) => {\n    //these happen once no matter what; they will not run again\n    const [username, setUsername] = useState(\"\");\n    const [orderLink, setOrderLink] = useState(\"\");\n    const [status, setStatus] = useState(\"loading\");\n    const [timeSlot, setTimeSlot] = useState(\"\");\n    const [imgUrl, setImgUrl] = useState(\"\");\n    const [itemName, setItemName] = useState(\"\");\n    const [closestLocation, setClosestLocation] = useState(\"\");\n    const [recentLocation, setRecentLocation] = useState(\"\");\n    const [bestLocation, setBestLocation] = useState(\"\");\n    const [statusMessage, setStatusMessage] = useState(\"\");\n\n    let time = \"\";\n    let timeStatus = \"\";\n\n    //this runs the first time, and then again whenever username is changed \n    useEffect(() => {\n        timeStatus = \"\";\n        requestRecommendation();\n    }, [username])\n\n    // fetches the recommendation, might need to be async? doesn't look like it does at the moment\n    const fetchRecommendation = function(username, time, timeSlot, latitude, longitude) {\n        // for local testing use this:\n        // fetch(`http://localhost:8000/recommendation/`, {\n        // for testing the deployed hosting\n        fetch(`https://crewi-engine.herokuapp.com/recommendation/`, {\n            // GET can't take a request body, apparently\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            // request parameters for getting a recommendation\n            body: JSON.stringify({\n              username: username,\n              time: time,\n              timeSlot: timeSlot,\n              latitude: latitude,\n              longitude: longitude\n            })\n        })\n            .then(response => response.json())\n            .then(result => {\n                // logs the result, updates the state (which will update the DOM)\n                console.log(result);\n\n                // updating item info\n                setImgUrl(result.items[0].imgUrl);\n                setItemName(result.items[0].name);\n\n                // updating location info\n                setClosestLocation(result.locations.closestLocation);\n                setRecentLocation(result.locations.recentLocation);\n                setBestLocation(result.locations.bestLocation);\n\n                // determining the status message\n                determineStatus(result.statuses);\n\n                // going to the success screen\n                setStatus(\"success\");\n            }).catch(error => {\n                // logs the error, updates state to fail; this is the full engine failure, so there won't be a status array\n                console.log(error);\n                setStatus(\"fail\");\n            })\n    }\n\n    //our first attempt at loading in time; it works, but we should probably reformat the time a little\n    //if this fails, the exception will be caught in requestRec\n    const loadCurrentTime = function() {\n        // throw 'exception'\n        // I'd like to walk through this at some point to make sure edge cases are covered\n        // return date + \" \" + localTime;\n        Number.prototype.padLeft = function(base,chr){\n            var  len = (String(base || 10).length - String(this).length)+1;\n            return len > 0? new Array(len).join(chr || '0')+this : this;\n        }\n        //returns the date in YYYY-MM-DD HH:MM:SS format\n        var d = new Date(),\n        dformat = [d.getFullYear(),\n                (d.getMonth()+1).padLeft(),\n               d.getDate().padLeft()].join('-') +' ' +\n              [d.getHours().padLeft(),\n               d.getMinutes().padLeft(),\n               d.getSeconds().padLeft()].join(':');\n        return dformat;\n    }\n\n    // gets coordinates then finds the address from there; \"location\" is the address we need for the request\n    const loadCurrentLocation = async function() {\n        try {\n            // result will be a Geolocation object; await means execution will pause here until finished\n            let result = await getCoordinates();   \n\n            // returns the coordinates to requestRecommendation, takes in coordinates and options\n            return [result.coords.latitude, result.coords.longitude]\n        } catch {\n            setStatus(\"no-location loading\");\n            return [\"BLOCKED\", \"BLOCKED\"];\n        }\n    }\n\n    // returns current latitude and longitude\n    const getCoordinates = async function() {\n        // gets the current coordinates using geolocator\n        const coordinatePromise = new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(resolve, reject);\n        });\n        \n        // returns coords once the promise is resolved/rejected, which happens when geolocating is complete\n        return await coordinatePromise;\n    }\n\n    //this runs whenever state or props are updated; it updates token so that the useEffect above will run\n    //props are updated when the button is clicked bc it will update the main state, etc.\n    useEffect(() => {\n      domElement.getAttribute(\"data-subreddit\")\n        setUsername(domElement.getAttribute(\"username\"));\n        setOrderLink(props.orderLink);\n    })\n\n    // runs whenever radio buttons are clicked\n    const onValueChange = (event) => {\n        // updates time slot, re-renders so the buttons will actually be checked\n        setTimeSlot(event.target.value);\n    }\n\n    // runs when submitting time slot\n    const formSubmit = (event) => {\n        // prevents redirect on form submit\n        event.preventDefault();\n        // only proceed if the user actually picks a time slot; otherwise, just ignore the submit until they do\n        if (timeSlot != \"\") {\n            timeStatus = \"time slot selected\";\n            // because the requesting useEffect only runs on username change, request has to be called again\n            requestRecommendation();\n        }\n    }\n\n    // contains overarching logic for loading data, requesting recommendation, and updating status accordingly\n    const requestRecommendation = async function() {\n        // requesting is when the widget is \"loading\"\n        setStatus(\"loading\");\n\n        // reset statuses whenever reloading widget; these should be overwritten anyway\n        setStatusMessage(\"\");\n\n        // if time slot is blank, try to request with time loading\n        if (timeStatus == \"\") {\n            try {\n                // if this fails, no time is invoked\n                time = loadCurrentTime();\n\n                try {\n                    // grabs location (meaning street address) and waits here so that fetchRec won't get called until this done\n                    // loadCurrentLocation needs to return a blank or sentinel value into location if something fails\n                    let coordinates = await loadCurrentLocation();\n                    const latitude = coordinates[0];\n                    const longitude = coordinates[1];\n\n                    // this will actually grab the rec and update the status for the DOM\n                    fetchRecommendation(username, time, timeSlot, latitude, longitude);\n                \n                } catch (error) {\n                    console.log(error);\n                    // if something goes wrong, go into no-time mode (again, restructure this later)\n                    setStatus(\"fail\");\n                }\n            } catch (error) {\n                // if time loading failed, update status and don't continue the request\n                console.error(error);\n                setTimeSlot(\"\");\n                setStatus(\"no-time\");\n            }\n        } else {\n            // this will run if time failed and the user picked a time slot\n            try {\n                // grabs location (meaning street address) and waits here so that fetchRec won't get called until this done\n                // loadCurrentLocation needs to return a blank or sentinel value into location if something fails\n                let coordinates = await loadCurrentLocation();\n                const latitude = coordinates[0];\n                const longitude = coordinates[1];\n\n                // this will actually grab the rec and update the status for the DOM\n                fetchRecommendation(username, time, timeSlot, latitude, longitude);\n            } catch (error) {\n                console.log(error);\n                // if something goes wrong, display fail\n                setStatus(\"fail\");\n            }\n        }\n\n        // time slot needs to be reset after each request so that loading time will be re-attempted\n        \n    }\n\n    const clickOrder = () =>{\n        window.location.href = orderLink;\n    }\n\n    const copyLocation = location => {\n        navigator.clipboard.writeText(location);\n    }\n\n    const showBest = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"bestSnackbar\");\n\n        document.getElementById(\"bestButton\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"bestButton\").disabled = false;\n        }, 3000);\n    }\n\n    const showClosest = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"closestSnackbar\");\n\n        document.getElementById(\"closestButton\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"closestButton\").disabled = false;\n        }, 3000);\n    }\n\n    const showRecent = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"recentSnackbar\");\n\n        document.getElementById(\"recentButton\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"recentButton\").disabled = false;\n        }, 3000);\n    }\n\n    const showStatus = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"statusSnackbar\");\n\n        document.getElementById(\"statusBtn\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"statusBtn\").disabled = false;\n        }, 3000);        \n    }\n\n    // this method determines what message to display to the end user based on the engine's issues and fails\n    // lots of room for adjustment here, refer to documentation\n    const determineStatus = (statusArray) => {\n        // msg is defaulted to blank, if there isn't a global fail, bad username, or location fail, it'll stay blank\n        // the other fails/issues aren't of top priority, so this keeps the user messages limited\n        // the response can still be logged to see all statuses if needed for debugging\n        let msg = \"\";\n        \n        // global fail takes priority, it means everything failed and the default is being used\n        // then bad username (if one was given), then location services being blocked\n        // could easily add a scenario for bad username and bad location, but that's probably less useful\n        // in theory if both are broken the user will just fix them one at a time\n        // plenty of adjustments could be made, can document and revise as needed\n        if (statusArray.includes(\"GLOBAL_FAIL\")) {\n            msg = \"Unable to make a customized recommendation at this time...\";\n        } else if (statusArray.includes(\"BAD_USERNAME_ISSUE\") && username) {\n            msg = \"No user found with that username, try signing in again\";\n        } else if (statusArray.includes(\"RECOMMEND_CLOSEST_ISSUE\")) {\n            msg = \"We couldn't find you, double check location permissions\";\n        }\n\n        setStatusMessage(msg);\n    }\n\n    // DISPLAY SECTION\n\n    // loading display\n    if (status == \"loading\")\n    {\n        return(\n            <div className='widgetLoading widgetBox boxShadowImitation' style={{\n                backgroundImage: `url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)`\n            }}>\n            </div>        \n        )\n    }\n\n    else if (status == \"no-location loading\")\n    {\n        return(\n            <div className='widgetLoading widgetBox boxShadowImitation' style={{\n                backgroundImage: `url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)`\n            }}>\n                <span className='widgetText'>\n                    Location unavailable\n                </span>\n            </div>\n        )\n    }\n\n    // no-time display\n\n    else if (status == \"no-time\")\n    {\n        //I think here we would want to display username if the end user has enetered it\n        return(\n            <div className='widgetBox boxShadowImitation' style={{\n                backgroundImage: `none`}}>\n                \n                <span>Unable to load time, please select an option below:</span>\n                <hr />\n                <br />\n                <form onSubmit={formSubmit}>\n                    <div style={{ paddingLeft: '38%', textAlign: \"left\"}}>\n                            <div className=\"radio\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Morning\"\n                                        name=\"dayPart\"\n                                        checked={timeSlot == \"Morning\"} \n                                        onChange={onValueChange}\n                                    />&nbsp;\n                                    Morning\n                                </label>\n                            </div>\n                            <div className=\"radio\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Afternoon\" \n                                        name=\"dayPart\"\n                                        checked={timeSlot == \"Afternoon\"} \n                                        onChange={onValueChange}\n                                    />&nbsp;\n                                    Afternoon\n                                </label>\n                            </div>\n                            <div className=\"radio\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Night\"\n                                        name=\"dayPart\"\n                                        checked={timeSlot == \"Night\"}\n                                        onChange={onValueChange}\n                                    />&nbsp;\n                                    Night\n                                </label>\n                            </div>\n                        </div>\n                            <br/>\n                            <button type=\"submit\" className='widgetButton'>Submit</button>\n                        </form>                \n            </div>\n        )\n    }\n\n    // success display (if rec is loaded successfully)\n\n    else if (status == \"success\")\n    {\n        // location for showing status\n        let statusHtml;\n        if (statusMessage) {\n            statusHtml = (<div>\n                <button className='widgetButton statusButton' id=\"statusBtn\" onClick={showStatus}>&nbsp;!&nbsp;</button>\n                <div className=\"snackbar \" id=\"statusSnackbar\">{statusMessage}</div>\n            </div>\n            )\n        }\n\n\n        // logic for handling the location display; swap out the specific HTML as needed\n        // also there's gotta be a better way to do this logic\n        let locationHtml;\n        \n        if (bestLocation) {\n            // if there's a best location, show it (means closest and most recent were the same and not blank)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"bestButton\" onClick={showBest}>Best Location</button>\n                <div onClick={() => copyLocation(bestLocation)} className=\"snackbar \" id=\"bestSnackbar\">{bestLocation}</div>\n            </div>)\n        } else if (closestLocation && recentLocation) {\n            // if there isn't a best location (b/c of the 'else') but closest and recent are truthy, they must be different (show both)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"closestButton\" onClick={showClosest}>Closest Location</button>\n                <div onClick={() => copyLocation(closestLocation)} className=\"snackbar \" id=\"closestSnackbar\">{closestLocation}</div>\n                &nbsp;\n                <button className='widgetButton' id=\"recentButton\" onClick={showRecent}>Previous Location</button>\n                <div onClick={() => copyLocation(recentLocation)} className=\"snackbar \" id=\"recentSnackbar\">{recentLocation}</div>\n            </div>)\n        } else if (closestLocation) {\n            // this happens if closest and recent were different, but recent was falsy, meaning it was blank (show closest only)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"closestButton\" onClick={showClosest}>Closest Location</button>\n                <div onClick={() => copyLocation(closestLocation)} className=\"snackbar \" id=\"closestSnackbar\">{closestLocation}</div>\n            </div>)\n        } else if (recentLocation) {\n            // this happens if closest and recent were different, but closest was falsy, meaning it was blank (show recent only)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"recentButton\" onClick={showRecent}>Previous Location</button>\n                <div onClick={() => copyLocation(recentLocation)} className=\"snackbar \" id=\"recentSnackbar\">{recentLocation}</div>\n            </div>)\n        } else {\n            // this means best, recent, and closest locations were all falsy (very likely blank); show an error or something, probably a reset button too\n            // may want to change this later, but the most elegant solution might just be to show nothing\n            // locationHtml = (<div>\n            //     {/* <span className='widgetText'>\n            //         LOCATION SERVICES FAILED\n            //     </span> */}\n            // </div>)\n        }\n\n        return(\n            <div id=\"widget\" className='widgetBox boxShadowImitation' style={{\n                backgroundImage: `url(${imgUrl})`\n            }}>\n                <button className='widgetButton resetButton' onClick={requestRecommendation}>&#8635;</button>\n                <span className='widgetText'>\n                    {itemName}\n                </span>\n                <br/>\n                <br/>\n                {statusHtml}\n                {locationHtml}\n                <br/>\n                <br/>\n            <button onClick={clickOrder} className='widgetButton' id=\"orderSpan\">Order Now</button>\n            </div>\n        )\n    }\n\n    // fail display (if rec fails completely)\n\n    else if (status == \"fail\")\n    {\n        return(\n            <div className='widgetBox boxShadowImitation' style={{\n                backgroundImage: `none`}}>\n                <span className='widgetText'>\n                    Recommendation failed\n                </span>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <button className='widgetButton' style={{\n                    //   background: '#a83232'\n                }} onClick={requestRecommendation}>Retry</button>\n            </div>\n        )\n    }\n\n    // may want to add more nuances, like having messages for showing location/time failure on the success display or something\n}\n  \n  const subreddit = domElement.getAttribute(\"data-subreddit\")\n  const [loading, setLoading] = useState();\n  const [error, setError] = useState('');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    // Fetch data from reddit\n    setLoading(true)\n    fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setLoading(false);\n        setData(data.data.children.slice(0, 10));\n      })\n      .catch((e) => {\n        console.log(e)\n        setLoading(false);\n        setError('error fetching from reddit');\n      });\n  }, [ subreddit ])\n\n  return (\n    <div className=\"reddit_widget__app\">\n      <h1 className=\"reddit_widget__header\">\n        Latest posts in <a href={`https://reddit.com/r/${subreddit}`} rel=\"noopener noreferrer\">/r/{subreddit}</a>\n      </h1>\n      <div className=\"reddit_widget__inner\">\n        {loading && \"Loading...\"}\n        {error && error}\n        {!!data.length && data.filter(nonStickiedOnly).map(renderPost)}\n      </div>\n      <p className=\"reddit_widget__powered_by\">\n        This widget is powered by{\" \"}\n        <a\n          href=\"https://javascriptpros.com\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          JavaScriptPros.com\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}