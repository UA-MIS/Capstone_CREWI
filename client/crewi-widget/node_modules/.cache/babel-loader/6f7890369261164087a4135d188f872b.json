{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/sward22/Desktop/Capstone_CREWI/client/crewi-widget/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/sward22/Desktop/Capstone_CREWI/client/crewi-widget/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\sward22\\\\Desktop\\\\Capstone_CREWI\\\\client\\\\crewi-widget\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useEffect,useState}from'react';import'./App.css';// Render each post\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function renderPost(post){var _post$data=post.data,title=_post$data.title,url=_post$data.url,author=_post$data.author,id=_post$data.id;var authorUrl=\"https://www.reddit.com/u/\".concat(author);return/*#__PURE__*/_jsxs(\"div\",{className:\"reddit_widget__post\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"reddit_widget__posted_by\",children:[\"posted by \",/*#__PURE__*/_jsxs(\"a\",{href:authorUrl,className:\"reddit_widget__posted_by\",target:\"_blank\",rel:\"noopener noreferrer\",children:[\"u/\",author]})]}),/*#__PURE__*/_jsx(\"a\",{href:url,className:\"reddit_widget__title\",target:\"_blank\",rel:\"noopener noreferrer\",children:title})]},id);}// Filter, since reddit always returns stickied posts up top\nfunction nonStickiedOnly(post){return!post.data.stickied;}function App(_ref){var domElement=_ref.domElement;//these happen once no matter what; they will not run again\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),username=_useState2[0],setUsername=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),orderLink=_useState4[0],setOrderLink=_useState4[1];var _useState5=useState(\"loading\"),_useState6=_slicedToArray(_useState5,2),status=_useState6[0],setStatus=_useState6[1];var _useState7=useState(\"\"),_useState8=_slicedToArray(_useState7,2),timeSlot=_useState8[0],setTimeSlot=_useState8[1];var _useState9=useState(\"\"),_useState10=_slicedToArray(_useState9,2),imgUrl=_useState10[0],setImgUrl=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),itemName=_useState12[0],setItemName=_useState12[1];var _useState13=useState(\"\"),_useState14=_slicedToArray(_useState13,2),closestLocation=_useState14[0],setClosestLocation=_useState14[1];var _useState15=useState(\"\"),_useState16=_slicedToArray(_useState15,2),recentLocation=_useState16[0],setRecentLocation=_useState16[1];var _useState17=useState(\"\"),_useState18=_slicedToArray(_useState17,2),bestLocation=_useState18[0],setBestLocation=_useState18[1];var _useState19=useState(\"\"),_useState20=_slicedToArray(_useState19,2),statusMessage=_useState20[0],setStatusMessage=_useState20[1];var time=\"\";var timeStatus=\"\";//this runs the first time, and then again whenever username is changed \nuseEffect(function(){timeStatus=\"\";requestRecommendation();},[username]);// fetches the recommendation, might need to be async? doesn't look like it does at the moment\nvar fetchRecommendation=function fetchRecommendation(username,time,timeSlot,latitude,longitude){// for local testing use this:\n// fetch(`http://localhost:8000/recommendation/`, {\n// for testing the deployed hosting\nfetch(\"https://crewi-engine.herokuapp.com/recommendation/\",{// GET can't take a request body, apparently\nmethod:\"POST\",headers:{\"Content-Type\":\"application/json\"},// request parameters for getting a recommendation\nbody:JSON.stringify({username:username,time:time,timeSlot:timeSlot,latitude:latitude,longitude:longitude})}).then(function(response){return response.json();}).then(function(result){// logs the result, updates the state (which will update the DOM)\nconsole.log(result);// updating item info\nsetImgUrl(result.items[0].imgUrl);setItemName(result.items[0].name);// updating location info\nsetClosestLocation(result.locations.closestLocation);setRecentLocation(result.locations.recentLocation);setBestLocation(result.locations.bestLocation);// determining the status message\ndetermineStatus(result.statuses);// going to the success screen\nsetStatus(\"success\");}).catch(function(error){// logs the error, updates state to fail; this is the full engine failure, so there won't be a status array\nconsole.log(error);setStatus(\"fail\");});};//our first attempt at loading in time; it works, but we should probably reformat the time a little\n//if this fails, the exception will be caught in requestRec\nvar loadCurrentTime=function loadCurrentTime(){// throw 'exception'\n// I'd like to walk through this at some point to make sure edge cases are covered\n// return date + \" \" + localTime;\nNumber.prototype.padLeft=function(base,chr){var len=String(base||10).length-String(this).length+1;return len>0?new Array(len).join(chr||'0')+this:this;};//returns the date in YYYY-MM-DD HH:MM:SS format\nvar d=new Date(),dformat=[d.getFullYear(),(d.getMonth()+1).padLeft(),d.getDate().padLeft()].join('-')+' '+[d.getHours().padLeft(),d.getMinutes().padLeft(),d.getSeconds().padLeft()].join(':');return dformat;};// gets coordinates then finds the address from there; \"location\" is the address we need for the request\nvar loadCurrentLocation=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var result;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return getCoordinates();case 3:result=_context.sent;return _context.abrupt(\"return\",[result.coords.latitude,result.coords.longitude]);case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);setStatus(\"no-location loading\");return _context.abrupt(\"return\",[\"BLOCKED\",\"BLOCKED\"]);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function loadCurrentLocation(){return _ref2.apply(this,arguments);};}();// returns current latitude and longitude\nvar getCoordinates=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var coordinatePromise;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// gets the current coordinates using geolocator\ncoordinatePromise=new Promise(function(resolve,reject){navigator.geolocation.getCurrentPosition(resolve,reject);});// returns coords once the promise is resolved/rejected, which happens when geolocating is complete\n_context2.next=3;return coordinatePromise;case 3:return _context2.abrupt(\"return\",_context2.sent);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getCoordinates(){return _ref3.apply(this,arguments);};}();//this runs whenever state or props are updated; it updates token so that the useEffect above will run\n//props are updated when the button is clicked bc it will update the main state, etc.\nuseEffect(function(){domElement.getAttribute(\"data-subreddit\");setUsername(domElement.getAttribute(\"username\"));setOrderLink(domElement.getAttribute(\"orderLink\"));});// runs whenever radio buttons are clicked\nvar onValueChange=function onValueChange(event){// updates time slot, re-renders so the buttons will actually be checked\nsetTimeSlot(event.target.value);};// runs when submitting time slot\nvar formSubmit=function formSubmit(event){// prevents redirect on form submit\nevent.preventDefault();// only proceed if the user actually picks a time slot; otherwise, just ignore the submit until they do\nif(timeSlot!=\"\"){timeStatus=\"time slot selected\";// because the requesting useEffect only runs on username change, request has to be called again\nrequestRecommendation();}};// contains overarching logic for loading data, requesting recommendation, and updating status accordingly\nvar requestRecommendation=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var coordinates,latitude,longitude,_coordinates,_latitude,_longitude;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:// requesting is when the widget is \"loading\"\nsetStatus(\"loading\");// reset statuses whenever reloading widget; these should be overwritten anyway\nsetStatusMessage(\"\");// if time slot is blank, try to request with time loading\nif(!(timeStatus==\"\")){_context3.next=27;break;}_context3.prev=3;// if this fails, no time is invoked\ntime=loadCurrentTime();_context3.prev=5;_context3.next=8;return loadCurrentLocation();case 8:coordinates=_context3.sent;latitude=coordinates[0];longitude=coordinates[1];// this will actually grab the rec and update the status for the DOM\nfetchRecommendation(username,time,timeSlot,latitude,longitude);_context3.next=18;break;case 14:_context3.prev=14;_context3.t0=_context3[\"catch\"](5);console.log(_context3.t0);// if something goes wrong, go into no-time mode (again, restructure this later)\nsetStatus(\"fail\");case 18:_context3.next=25;break;case 20:_context3.prev=20;_context3.t1=_context3[\"catch\"](3);// if time loading failed, update status and don't continue the request\nconsole.error(_context3.t1);setTimeSlot(\"\");setStatus(\"no-time\");case 25:_context3.next=40;break;case 27:_context3.prev=27;_context3.next=30;return loadCurrentLocation();case 30:_coordinates=_context3.sent;_latitude=_coordinates[0];_longitude=_coordinates[1];// this will actually grab the rec and update the status for the DOM\nfetchRecommendation(username,time,timeSlot,_latitude,_longitude);_context3.next=40;break;case 36:_context3.prev=36;_context3.t2=_context3[\"catch\"](27);console.log(_context3.t2);// if something goes wrong, display fail\nsetStatus(\"fail\");case 40:case\"end\":return _context3.stop();}}},_callee3,null,[[3,20],[5,14],[27,36]]);}));return function requestRecommendation(){return _ref4.apply(this,arguments);};}();var clickOrder=function clickOrder(){window.location.href=orderLink;};var copyLocation=function copyLocation(location){navigator.clipboard.writeText(location);};var showBest=function showBest(){// Get the snackbar DIV\nvar x=document.getElementById(\"bestSnackbar\");document.getElementById(\"bestButton\").disabled=true;// Add the \"show\" class to DIV\nx.className+=\"show\";// After 3 seconds, remove the show class from DIV\nsetTimeout(function(){x.className=x.className.replace(\"show\",\"\");document.getElementById(\"bestButton\").disabled=false;},3000);};var showClosest=function showClosest(){// Get the snackbar DIV\nvar x=document.getElementById(\"closestSnackbar\");document.getElementById(\"closestButton\").disabled=true;// Add the \"show\" class to DIV\nx.className+=\"show\";// After 3 seconds, remove the show class from DIV\nsetTimeout(function(){x.className=x.className.replace(\"show\",\"\");document.getElementById(\"closestButton\").disabled=false;},3000);};var showRecent=function showRecent(){// Get the snackbar DIV\nvar x=document.getElementById(\"recentSnackbar\");document.getElementById(\"recentButton\").disabled=true;// Add the \"show\" class to DIV\nx.className+=\"show\";// After 3 seconds, remove the show class from DIV\nsetTimeout(function(){x.className=x.className.replace(\"show\",\"\");document.getElementById(\"recentButton\").disabled=false;},3000);};var showStatus=function showStatus(){// Get the snackbar DIV\nvar x=document.getElementById(\"statusSnackbar\");document.getElementById(\"statusBtn\").disabled=true;// Add the \"show\" class to DIV\nx.className+=\"show\";// After 3 seconds, remove the show class from DIV\nsetTimeout(function(){x.className=x.className.replace(\"show\",\"\");document.getElementById(\"statusBtn\").disabled=false;},3000);};// this method determines what message to display to the end user based on the engine's issues and fails\n// lots of room for adjustment here, refer to documentation\nvar determineStatus=function determineStatus(statusArray){// msg is defaulted to blank, if there isn't a global fail, bad username, or location fail, it'll stay blank\n// the other fails/issues aren't of top priority, so this keeps the user messages limited\n// the response can still be logged to see all statuses if needed for debugging\nvar msg=\"\";// global fail takes priority, it means everything failed and the default is being used\n// then bad username (if one was given), then location services being blocked\n// could easily add a scenario for bad username and bad location, but that's probably less useful\n// in theory if both are broken the user will just fix them one at a time\n// plenty of adjustments could be made, can document and revise as needed\nif(statusArray.includes(\"GLOBAL_FAIL\")){msg=\"Unable to make a customized recommendation at this time...\";}else if(statusArray.includes(\"BAD_USERNAME_ISSUE\")&&username){msg=\"No user found with that username, try signing in again\";}else if(statusArray.includes(\"RECOMMEND_CLOSEST_ISSUE\")){msg=\"We couldn't find you, double check location permissions\";}setStatusMessage(msg);};// DISPLAY SECTION\n// loading display\nif(status==\"loading\"){return/*#__PURE__*/_jsx(\"div\",{className:\"widgetLoading widgetBox boxShadowImitation\",style:{backgroundImage:\"url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)\"}});}else if(status==\"no-location loading\"){return/*#__PURE__*/_jsx(\"div\",{className:\"widgetLoading widgetBox boxShadowImitation\",style:{backgroundImage:\"url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)\"},children:/*#__PURE__*/_jsx(\"span\",{className:\"widgetText\",children:\"Location unavailable\"})});}// no-time display\nelse if(status==\"no-time\"){//I think here we would want to display username if the end user has enetered it\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"widgetBox boxShadowImitation\",style:{backgroundImage:\"none\"},children:[/*#__PURE__*/_jsx(\"span\",{children:\"Unable to load time, please select an option below:\"}),/*#__PURE__*/_jsx(\"hr\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:formSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{style:{paddingLeft:'38%',textAlign:\"left\"},children:[/*#__PURE__*/_jsx(\"div\",{className:\"radio\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",value:\"Morning\",name:\"dayPart\",checked:timeSlot==\"Morning\",onChange:onValueChange}),\"\\xA0 Morning\"]})}),/*#__PURE__*/_jsx(\"div\",{className:\"radio\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",value:\"Afternoon\",name:\"dayPart\",checked:timeSlot==\"Afternoon\",onChange:onValueChange}),\"\\xA0 Afternoon\"]})}),/*#__PURE__*/_jsx(\"div\",{className:\"radio\",children:/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",value:\"Night\",name:\"dayPart\",checked:timeSlot==\"Night\",onChange:onValueChange}),\"\\xA0 Night\"]})})]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"widgetButton\",children:\"Submit\"})]})]});}// success display (if rec is loaded successfully)\nelse if(status==\"success\"){// location for showing status\nvar statusHtml;if(statusMessage){statusHtml=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton statusButton\",id:\"statusBtn\",onClick:showStatus,children:\"\\xA0!\\xA0\"}),/*#__PURE__*/_jsx(\"div\",{className:\"snackbar \",id:\"statusSnackbar\",children:statusMessage})]});}// logic for handling the location display; swap out the specific HTML as needed\n// also there's gotta be a better way to do this logic\nvar locationHtml;if(bestLocation){// if there's a best location, show it (means closest and most recent were the same and not blank)\nlocationHtml=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton\",id:\"bestButton\",onClick:showBest,children:\"Best Location\"}),/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return copyLocation(bestLocation);},className:\"snackbar \",id:\"bestSnackbar\",children:bestLocation})]});}else if(closestLocation&&recentLocation){// if there isn't a best location (b/c of the 'else') but closest and recent are truthy, they must be different (show both)\nlocationHtml=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton\",id:\"closestButton\",onClick:showClosest,children:\"Closest Location\"}),/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return copyLocation(closestLocation);},className:\"snackbar \",id:\"closestSnackbar\",children:closestLocation}),\"\\xA0\",/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton\",id:\"recentButton\",onClick:showRecent,children:\"Previous Location\"}),/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return copyLocation(recentLocation);},className:\"snackbar \",id:\"recentSnackbar\",children:recentLocation})]});}else if(closestLocation){// this happens if closest and recent were different, but recent was falsy, meaning it was blank (show closest only)\nlocationHtml=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton\",id:\"closestButton\",onClick:showClosest,children:\"Closest Location\"}),/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return copyLocation(closestLocation);},className:\"snackbar \",id:\"closestSnackbar\",children:closestLocation})]});}else if(recentLocation){// this happens if closest and recent were different, but closest was falsy, meaning it was blank (show recent only)\nlocationHtml=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton\",id:\"recentButton\",onClick:showRecent,children:\"Previous Location\"}),/*#__PURE__*/_jsx(\"div\",{onClick:function onClick(){return copyLocation(recentLocation);},className:\"snackbar \",id:\"recentSnackbar\",children:recentLocation})]});}else{// this means best, recent, and closest locations were all falsy (very likely blank); show an error or something, probably a reset button too\n// may want to change this later, but the most elegant solution might just be to show nothing\n// locationHtml = (<div>\n//     {/* <span className='widgetText'>\n//         LOCATION SERVICES FAILED\n//     </span> */}\n// </div>)\n}return/*#__PURE__*/_jsxs(\"div\",{id:\"widget\",className:\"widgetBox boxShadowImitation\",style:{backgroundImage:\"url(\".concat(imgUrl,\")\")},children:[/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton resetButton\",onClick:requestRecommendation,children:\"\\u21BB\"}),/*#__PURE__*/_jsx(\"span\",{className:\"widgetText\",children:itemName}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),statusHtml,locationHtml,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{onClick:clickOrder,className:\"widgetButton\",id:\"orderSpan\",children:\"Order Now\"})]});}// fail display (if rec fails completely)\nelse if(status==\"fail\"){return/*#__PURE__*/_jsxs(\"div\",{className:\"widgetBox boxShadowImitation\",style:{backgroundImage:\"none\"},children:[/*#__PURE__*/_jsx(\"span\",{className:\"widgetText\",children:\"Recommendation failed\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"button\",{className:\"widgetButton\",style:{//   background: '#a83232'\n},onClick:requestRecommendation,children:\"Retry\"})]});}// may want to add more nuances, like having messages for showing location/time failure on the success display or something\n}export default App;","map":{"version":3,"sources":["C:/Users/sward22/Desktop/Capstone_CREWI/client/crewi-widget/src/App.js"],"names":["React","useEffect","useState","renderPost","post","data","title","url","author","id","authorUrl","nonStickiedOnly","stickied","App","domElement","username","setUsername","orderLink","setOrderLink","status","setStatus","timeSlot","setTimeSlot","imgUrl","setImgUrl","itemName","setItemName","closestLocation","setClosestLocation","recentLocation","setRecentLocation","bestLocation","setBestLocation","statusMessage","setStatusMessage","time","timeStatus","requestRecommendation","fetchRecommendation","latitude","longitude","fetch","method","headers","body","JSON","stringify","then","response","json","result","console","log","items","name","locations","determineStatus","statuses","catch","error","loadCurrentTime","Number","prototype","padLeft","base","chr","len","String","length","Array","join","d","Date","dformat","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","loadCurrentLocation","getCoordinates","coords","coordinatePromise","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","getAttribute","onValueChange","event","target","value","formSubmit","preventDefault","coordinates","clickOrder","window","location","href","copyLocation","clipboard","writeText","showBest","x","document","getElementById","disabled","className","setTimeout","replace","showClosest","showRecent","showStatus","statusArray","msg","includes","backgroundImage","paddingLeft","textAlign","statusHtml","locationHtml"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\n// Render each post\nfunction renderPost(post){\n  const { data: { title, url, author, id } } = post\n  const authorUrl = `https://www.reddit.com/u/${author}`\n\n  return (\n    <div className=\"reddit_widget__post\" key={id}>\n      <div className=\"reddit_widget__posted_by\">\n        posted by <a href={authorUrl} className=\"reddit_widget__posted_by\" target=\"_blank\" rel=\"noopener noreferrer\">u/{author}</a>\n      </div>\n      <a href={url} className=\"reddit_widget__title\" target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n    </div>\n  )\n}\n\n// Filter, since reddit always returns stickied posts up top\nfunction nonStickiedOnly(post){\n  return !post.data.stickied\n}\n\nfunction App({ domElement }) {\n    //these happen once no matter what; they will not run again\n    const [username, setUsername] = useState(\"\");\n    const [orderLink, setOrderLink] = useState(\"\");\n    const [status, setStatus] = useState(\"loading\");\n    const [timeSlot, setTimeSlot] = useState(\"\");\n    const [imgUrl, setImgUrl] = useState(\"\");\n    const [itemName, setItemName] = useState(\"\");\n    const [closestLocation, setClosestLocation] = useState(\"\");\n    const [recentLocation, setRecentLocation] = useState(\"\");\n    const [bestLocation, setBestLocation] = useState(\"\");\n    const [statusMessage, setStatusMessage] = useState(\"\");\n\n    let time = \"\";\n    let timeStatus = \"\";\n\n    //this runs the first time, and then again whenever username is changed \n    useEffect(() => {\n        timeStatus = \"\";\n        requestRecommendation();\n    }, [username])\n\n    // fetches the recommendation, might need to be async? doesn't look like it does at the moment\n    const fetchRecommendation = function(username, time, timeSlot, latitude, longitude) {\n        // for local testing use this:\n        // fetch(`http://localhost:8000/recommendation/`, {\n        // for testing the deployed hosting\n        fetch(`https://crewi-engine.herokuapp.com/recommendation/`, {\n            // GET can't take a request body, apparently\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            // request parameters for getting a recommendation\n            body: JSON.stringify({\n              username: username,\n              time: time,\n              timeSlot: timeSlot,\n              latitude: latitude,\n              longitude: longitude\n            })\n        })\n            .then(response => response.json())\n            .then(result => {\n                // logs the result, updates the state (which will update the DOM)\n                console.log(result);\n\n                // updating item info\n                setImgUrl(result.items[0].imgUrl);\n                setItemName(result.items[0].name);\n\n                // updating location info\n                setClosestLocation(result.locations.closestLocation);\n                setRecentLocation(result.locations.recentLocation);\n                setBestLocation(result.locations.bestLocation);\n\n                // determining the status message\n                determineStatus(result.statuses);\n\n                // going to the success screen\n                setStatus(\"success\");\n            }).catch(error => {\n                // logs the error, updates state to fail; this is the full engine failure, so there won't be a status array\n                console.log(error);\n                setStatus(\"fail\");\n            })\n    }\n\n    //our first attempt at loading in time; it works, but we should probably reformat the time a little\n    //if this fails, the exception will be caught in requestRec\n    const loadCurrentTime = function() {\n        // throw 'exception'\n        // I'd like to walk through this at some point to make sure edge cases are covered\n        // return date + \" \" + localTime;\n        Number.prototype.padLeft = function(base,chr){\n            var  len = (String(base || 10).length - String(this).length)+1;\n            return len > 0? new Array(len).join(chr || '0')+this : this;\n        }\n        //returns the date in YYYY-MM-DD HH:MM:SS format\n        var d = new Date(),\n        dformat = [d.getFullYear(),\n                (d.getMonth()+1).padLeft(),\n               d.getDate().padLeft()].join('-') +' ' +\n              [d.getHours().padLeft(),\n               d.getMinutes().padLeft(),\n               d.getSeconds().padLeft()].join(':');\n        return dformat;\n    }\n\n    // gets coordinates then finds the address from there; \"location\" is the address we need for the request\n    const loadCurrentLocation = async function() {\n        try {\n            // result will be a Geolocation object; await means execution will pause here until finished\n            let result = await getCoordinates();   \n\n            // returns the coordinates to requestRecommendation, takes in coordinates and options\n            return [result.coords.latitude, result.coords.longitude]\n        } catch {\n            setStatus(\"no-location loading\");\n            return [\"BLOCKED\", \"BLOCKED\"];\n        }\n    }\n\n    // returns current latitude and longitude\n    const getCoordinates = async function() {\n        // gets the current coordinates using geolocator\n        const coordinatePromise = new Promise((resolve, reject) => {\n            navigator.geolocation.getCurrentPosition(resolve, reject);\n        });\n        \n        // returns coords once the promise is resolved/rejected, which happens when geolocating is complete\n        return await coordinatePromise;\n    }\n\n    //this runs whenever state or props are updated; it updates token so that the useEffect above will run\n    //props are updated when the button is clicked bc it will update the main state, etc.\n    useEffect(() => {\n      domElement.getAttribute(\"data-subreddit\")\n        setUsername(domElement.getAttribute(\"username\"));\n        setOrderLink(domElement.getAttribute(\"orderLink\"));\n    })\n\n    // runs whenever radio buttons are clicked\n    const onValueChange = (event) => {\n        // updates time slot, re-renders so the buttons will actually be checked\n        setTimeSlot(event.target.value);\n    }\n\n    // runs when submitting time slot\n    const formSubmit = (event) => {\n        // prevents redirect on form submit\n        event.preventDefault();\n        // only proceed if the user actually picks a time slot; otherwise, just ignore the submit until they do\n        if (timeSlot != \"\") {\n            timeStatus = \"time slot selected\";\n            // because the requesting useEffect only runs on username change, request has to be called again\n            requestRecommendation();\n        }\n    }\n\n    // contains overarching logic for loading data, requesting recommendation, and updating status accordingly\n    const requestRecommendation = async function() {\n        // requesting is when the widget is \"loading\"\n        setStatus(\"loading\");\n\n        // reset statuses whenever reloading widget; these should be overwritten anyway\n        setStatusMessage(\"\");\n\n        // if time slot is blank, try to request with time loading\n        if (timeStatus == \"\") {\n            try {\n                // if this fails, no time is invoked\n                time = loadCurrentTime();\n\n                try {\n                    // grabs location (meaning street address) and waits here so that fetchRec won't get called until this done\n                    // loadCurrentLocation needs to return a blank or sentinel value into location if something fails\n                    let coordinates = await loadCurrentLocation();\n                    const latitude = coordinates[0];\n                    const longitude = coordinates[1];\n\n                    // this will actually grab the rec and update the status for the DOM\n                    fetchRecommendation(username, time, timeSlot, latitude, longitude);\n                \n                } catch (error) {\n                    console.log(error);\n                    // if something goes wrong, go into no-time mode (again, restructure this later)\n                    setStatus(\"fail\");\n                }\n            } catch (error) {\n                // if time loading failed, update status and don't continue the request\n                console.error(error);\n                setTimeSlot(\"\");\n                setStatus(\"no-time\");\n            }\n        } else {\n            // this will run if time failed and the user picked a time slot\n            try {\n                // grabs location (meaning street address) and waits here so that fetchRec won't get called until this done\n                // loadCurrentLocation needs to return a blank or sentinel value into location if something fails\n                let coordinates = await loadCurrentLocation();\n                const latitude = coordinates[0];\n                const longitude = coordinates[1];\n\n                // this will actually grab the rec and update the status for the DOM\n                fetchRecommendation(username, time, timeSlot, latitude, longitude);\n            } catch (error) {\n                console.log(error);\n                // if something goes wrong, display fail\n                setStatus(\"fail\");\n            }\n        }\n\n        // time slot needs to be reset after each request so that loading time will be re-attempted\n        \n    }\n\n    const clickOrder = () =>{\n        window.location.href = orderLink;\n    }\n\n    const copyLocation = location => {\n        navigator.clipboard.writeText(location);\n    }\n\n    const showBest = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"bestSnackbar\");\n\n        document.getElementById(\"bestButton\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"bestButton\").disabled = false;\n        }, 3000);\n    }\n\n    const showClosest = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"closestSnackbar\");\n\n        document.getElementById(\"closestButton\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"closestButton\").disabled = false;\n        }, 3000);\n    }\n\n    const showRecent = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"recentSnackbar\");\n\n        document.getElementById(\"recentButton\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"recentButton\").disabled = false;\n        }, 3000);\n    }\n\n    const showStatus = () => {\n        // Get the snackbar DIV\n        var x = document.getElementById(\"statusSnackbar\");\n\n        document.getElementById(\"statusBtn\").disabled = true;\n\n        // Add the \"show\" class to DIV\n        x.className += \"show\";\n\n        // After 3 seconds, remove the show class from DIV\n        setTimeout(function(){\n            x.className = x.className.replace(\"show\", \"\"); \n            document.getElementById(\"statusBtn\").disabled = false;\n        }, 3000);        \n    }\n\n    // this method determines what message to display to the end user based on the engine's issues and fails\n    // lots of room for adjustment here, refer to documentation\n    const determineStatus = (statusArray) => {\n        // msg is defaulted to blank, if there isn't a global fail, bad username, or location fail, it'll stay blank\n        // the other fails/issues aren't of top priority, so this keeps the user messages limited\n        // the response can still be logged to see all statuses if needed for debugging\n        let msg = \"\";\n        \n        // global fail takes priority, it means everything failed and the default is being used\n        // then bad username (if one was given), then location services being blocked\n        // could easily add a scenario for bad username and bad location, but that's probably less useful\n        // in theory if both are broken the user will just fix them one at a time\n        // plenty of adjustments could be made, can document and revise as needed\n        if (statusArray.includes(\"GLOBAL_FAIL\")) {\n            msg = \"Unable to make a customized recommendation at this time...\";\n        } else if (statusArray.includes(\"BAD_USERNAME_ISSUE\") && username) {\n            msg = \"No user found with that username, try signing in again\";\n        } else if (statusArray.includes(\"RECOMMEND_CLOSEST_ISSUE\")) {\n            msg = \"We couldn't find you, double check location permissions\";\n        }\n\n        setStatusMessage(msg);\n    }\n\n    // DISPLAY SECTION\n\n    // loading display\n    if (status == \"loading\")\n    {\n        return(\n            <div className='widgetLoading widgetBox boxShadowImitation' style={{\n                backgroundImage: `url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)`\n            }}>\n            </div>        \n        )\n    }\n\n    else if (status == \"no-location loading\")\n    {\n        return(\n            <div className='widgetLoading widgetBox boxShadowImitation' style={{\n                backgroundImage: `url(https://drive.google.com/uc?export=view&id=1jOKIa9urkCFsa6OGGf8Hrd8DROPzkmfa)`\n            }}>\n                <span className='widgetText'>\n                    Location unavailable\n                </span>\n            </div>\n        )\n    }\n\n    // no-time display\n\n    else if (status == \"no-time\")\n    {\n        //I think here we would want to display username if the end user has enetered it\n        return(\n            <div className='widgetBox boxShadowImitation' style={{\n                backgroundImage: `none`}}>\n                \n                <span>Unable to load time, please select an option below:</span>\n                <hr />\n                <br />\n                <form onSubmit={formSubmit}>\n                    <div style={{ paddingLeft: '38%', textAlign: \"left\"}}>\n                            <div className=\"radio\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Morning\"\n                                        name=\"dayPart\"\n                                        checked={timeSlot == \"Morning\"} \n                                        onChange={onValueChange}\n                                    />&nbsp;\n                                    Morning\n                                </label>\n                            </div>\n                            <div className=\"radio\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Afternoon\" \n                                        name=\"dayPart\"\n                                        checked={timeSlot == \"Afternoon\"} \n                                        onChange={onValueChange}\n                                    />&nbsp;\n                                    Afternoon\n                                </label>\n                            </div>\n                            <div className=\"radio\">\n                                <label>\n                                    <input\n                                        type=\"radio\"\n                                        value=\"Night\"\n                                        name=\"dayPart\"\n                                        checked={timeSlot == \"Night\"}\n                                        onChange={onValueChange}\n                                    />&nbsp;\n                                    Night\n                                </label>\n                            </div>\n                        </div>\n                            <br/>\n                            <button type=\"submit\" className='widgetButton'>Submit</button>\n                        </form>                \n            </div>\n        )\n    }\n\n    // success display (if rec is loaded successfully)\n\n    else if (status == \"success\")\n    {\n        // location for showing status\n        let statusHtml;\n        if (statusMessage) {\n            statusHtml = (<div>\n                <button className='widgetButton statusButton' id=\"statusBtn\" onClick={showStatus}>&nbsp;!&nbsp;</button>\n                <div className=\"snackbar \" id=\"statusSnackbar\">{statusMessage}</div>\n            </div>\n            )\n        }\n\n\n        // logic for handling the location display; swap out the specific HTML as needed\n        // also there's gotta be a better way to do this logic\n        let locationHtml;\n        \n        if (bestLocation) {\n            // if there's a best location, show it (means closest and most recent were the same and not blank)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"bestButton\" onClick={showBest}>Best Location</button>\n                <div onClick={() => copyLocation(bestLocation)} className=\"snackbar \" id=\"bestSnackbar\">{bestLocation}</div>\n            </div>)\n        } else if (closestLocation && recentLocation) {\n            // if there isn't a best location (b/c of the 'else') but closest and recent are truthy, they must be different (show both)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"closestButton\" onClick={showClosest}>Closest Location</button>\n                <div onClick={() => copyLocation(closestLocation)} className=\"snackbar \" id=\"closestSnackbar\">{closestLocation}</div>\n                &nbsp;\n                <button className='widgetButton' id=\"recentButton\" onClick={showRecent}>Previous Location</button>\n                <div onClick={() => copyLocation(recentLocation)} className=\"snackbar \" id=\"recentSnackbar\">{recentLocation}</div>\n            </div>)\n        } else if (closestLocation) {\n            // this happens if closest and recent were different, but recent was falsy, meaning it was blank (show closest only)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"closestButton\" onClick={showClosest}>Closest Location</button>\n                <div onClick={() => copyLocation(closestLocation)} className=\"snackbar \" id=\"closestSnackbar\">{closestLocation}</div>\n            </div>)\n        } else if (recentLocation) {\n            // this happens if closest and recent were different, but closest was falsy, meaning it was blank (show recent only)\n            locationHtml = (<div>\n                <button className='widgetButton' id=\"recentButton\" onClick={showRecent}>Previous Location</button>\n                <div onClick={() => copyLocation(recentLocation)} className=\"snackbar \" id=\"recentSnackbar\">{recentLocation}</div>\n            </div>)\n        } else {\n            // this means best, recent, and closest locations were all falsy (very likely blank); show an error or something, probably a reset button too\n            // may want to change this later, but the most elegant solution might just be to show nothing\n            // locationHtml = (<div>\n            //     {/* <span className='widgetText'>\n            //         LOCATION SERVICES FAILED\n            //     </span> */}\n            // </div>)\n        }\n\n        return(\n            <div id=\"widget\" className='widgetBox boxShadowImitation' style={{\n                backgroundImage: `url(${imgUrl})`\n            }}>\n                <button className='widgetButton resetButton' onClick={requestRecommendation}>&#8635;</button>\n                <span className='widgetText'>\n                    {itemName}\n                </span>\n                <br/>\n                <br/>\n                {statusHtml}\n                {locationHtml}\n                <br/>\n                <br/>\n            <button onClick={clickOrder} className='widgetButton' id=\"orderSpan\">Order Now</button>\n            </div>\n        )\n    }\n\n    // fail display (if rec fails completely)\n\n    else if (status == \"fail\")\n    {\n        return(\n            <div className='widgetBox boxShadowImitation' style={{\n                backgroundImage: `none`}}>\n                <span className='widgetText'>\n                    Recommendation failed\n                </span>\n                <br/>\n                <br/>\n                <br/>\n                <br/>\n                <button className='widgetButton' style={{\n                    //   background: '#a83232'\n                }} onClick={requestRecommendation}>Retry</button>\n            </div>\n        )\n    }\n\n    // may want to add more nuances, like having messages for showing location/time failure on the success display or something\n\n  \n \n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}